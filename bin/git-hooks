#!/bin/bash

exname="$(basename "$0")"


gitdir="$(git rev-parse --git-dir)"
if [ "$?" != "0" ]; then
    echo "fatal: 'git rev-parse --git-dir' failed." >&2
    exit 1
fi

githooks_base=$(git config "git-hooks.install-dir")
if [ "$?" != "0" ]; then
    echo "No git-hooks.install-dir variable. Please set this variable with:" >&2
    echo "   git config [--system] git-hooks.install-dir MY_GIT_HOOKS_BASE_DIR" >&2
    exit 1
fi

if ! [ -e "$githooks_base/generic-post-receive" ]; then
    echo "Bad path for git-hooks.install_dir !" >&2
    echo "file '$githooks_base/generic-post-receive' not found" >&2
    exit 1
fi


git_hooks_init_usage="$exname init"
function git_hooks_init() {

    if [ -L "$gitdir/hooks/post-receive" ]; then
       if [ "$(readlink -e "$gitdir/hooks/post-receive")" == \
            "$githooks_base/generic-post-receive" ]; then
           echo "Correct link already existing."
       else
           echo "Error: another link is already set in $gitdir/hooks/post-receive"
           exit 1
       fi
    elif [ -e "$gitdir/hooks/post-receive" ]; then
       echo "Error: a file already exists by the name: gitdir/hooks/post-receive"
       exit 1
    else
        ln -snv "$githooks_base/generic-post-receive" "$gitdir/hooks/post-receive"
    fi

    mkdir -p "$gitdir/hooks/post-receive.d"
}
export -f git_hooks_init


## Check if ssh authentication is passwd-less between localhost and $1 lxc
function can_ssh_without_passwd() {
  ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no "$1" \
     echo "test" >/dev/null 2>&1
}

## Ensure that ssh authentication is passwd-less between localhost and $1 lxc
function make_ssh_connection_work() {
    host="$1"
    if ! can_ssh_without_passwd "$host"; then
        ## need to create key and send it to HOST
        if ! [ -e ~/.ssh/id_rsa.pub ]; then
            ## need to create a key
            ssh-keygen -t rsa -q -f ~/.ssh/id_rsa -N ""
        fi

        echo "Logging to $host to copy ssh keys:"
        ssh-copy-id "$host"
        if [ "$?" != 0 ]; then
            echo "Error: cannot ssh-copy-id." >&2
            return 1
	fi

    fi

    if ! can_ssh_without_passwd "$host"; then
        echo "Cannot ssh towards $HOST despite copying id ?!" >&2
        return 1
    fi

}

## Ensure that git hooks was inited
function make_git_hooks_inited() {
    if ! [ -d "$gitdir/hooks/post-receive.d" ]; then
        echo "No '$gitdir/hooks/post-receive.d' existing..."
        echo "Perhaps launching 'git-hooks init' will help..."
        git-hooks init
        test "$?" == "0" || return 1
    fi
}


##
# hook_name should have been set !
function init_action() {

    local md5salt md5 name l c hook_src
    md5salt="$1"

    md5=$(echo "$md5salt" | md5sum | cut -c 1-8 )
    name="${hook_name}_${host}_${md5}"
    l="$gitdir/hooks/post-receive.d/$name.hook"
    c="$gitdir/hooks/post-receive.d/$name.conf"

    if [ -e "$l" ]; then
        echo "File '$l' already exists. Aborting."
        exit 1
    fi
    if [ -e "$c" ]; then
        echo "File '$c' already exists. Aborting."
        exit 1
    fi

    hook_src="$githooks_base/hooks/${hook_name}.hook"
    if ! [ -e "$hook_src" ]; then
        echo "Source hook '$hook_src' doesn't exists !"
        exit 1
    fi

    ln -sn "$githooks_base/hooks/${hook_name}.hook" "$l"
    cat - > "$c"

}

git_hooks_add_usage="$exname add HOOK [HOOK-OPTIONS...]"
git_hooks_add() {

    export hook_name="$1"
    shift

    hook_files="$(echo "$githooks_base/hooks/"*.hook)"
    if [ "$hook_files" == "$githooks_base/hooks/*.hook" ]; then
        echo "No hook available. Else yor hook dir is empty, or "
        echo "hook files are not correctly named."
        echo "    -> Your hooks should be placed and named as follows:"
        echo "       '$githooks_base/hooks/*.hook'"
        exit 1
    fi

    if [ -z "$hook_name" ]; then
        echo "You should provide a hook name." >&2
        echo >&2
        echo "These are the available hooks:" >&2
        for hook_file in $hook_files; do
            echo " - $(basename "$hook_file" .hook)" >&2
        done
        echo >&2
        echo "usage: $git_hooks_add_usage" >&2
        exit 1
    fi

    hook_file=$githooks_base/hooks/$hook_name.hook
    if ! [ -e "$hook_file" ]; then
        echo "Hook file '$hook_file' not found."
        echo "No hook '$1' available."
        exit 1
    fi

    make_git_hooks_inited || exit 1

    command_prefix="$exname add $hook_name"
    ## unset any function that could have been defined before
    unset "install" >/dev/null 2>&1

    . "$hook_file"

    if ! [ "$(type -t install)" == "function" ]; then
        echo "Hook defined in '$hook_file' does not declare any 'install' method"
        exit 1
    fi

    install "$@"

}


##
## Code
##

arg=$1
shift
if [ "$(type -t git_hooks_$arg)" == "function" ]; then
    git_hooks_$arg "$@"
else
    cmd_funcs=$(set | egrep "^git_hooks_[a-zA-Z0-9_]+ ()" | cut -f 1 -d " " | \
         cut -f 3- -d "_")

    if [ "$arg" ]; then
        echo "Unknown sub-command '$arg' for git-hooks" >&2
    else
        echo "You should provide a sub-command." >&2
    fi
    echo >&2
    echo "This is the list of supported sub-commands:" >&2
    for cmd_func in $cmd_funcs; do
        usage_var="git_hooks_${cmd_func}_usage"
        echo "   " $(eval echo \$$usage_var) >&2
    done
    echo >&2
    exit 1
fi
