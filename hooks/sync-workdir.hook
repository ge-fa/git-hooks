## -*- mode: shell-script -*-

## All variables listed here will be checked for existence
required_variables="HOST DISTANT_REPO_DIR TARGET_BRANCH"

logfile=/tmp/logfile
## post-receive_ref function gets called for each pushed ref.
## These variables will be set accordingly:
##     $oldrev, $newrev, $refname
post-receive_ref() {

    is_branch "$refname" || return

    branch_name="$(get_bare_name "$refname")"
    [ "$branch_name" == "$TARGET_BRANCH" ] || return

    ssh "$HOST" "[ -d '$DISTANT_REPO_DIR' ]"

    has_repo=$?
    if [ "$has_repo" != "0" ]; then
        pid="$$"
        local_tmp_dir="$tmpdir/$pid"
        mkdir "$tmpdir/$pid"
        git clone -q "$CURRENT_REPO_PATH" "$local_tmp_dir/$COMPONENT_NAME"
        (cd "$local_tmp_dir/$COMPONENT_NAME" &&
         git checkout -q "$TARGET_BRANCH")
        scp -r "$local_tmp_dir/$COMPONENT_NAME" \
            "$HOST:$DISTANT_REPO_DIR"
        rm -rf "$local_tmp_dir/"
    fi

    echo "Forcing workdir of $HOST:$DISTANT_REPO_DIR to new ref on branch '$branch_name'."
    cat <<EOF | ssh "$HOST" | divert_to_log

           DISTANT_REPO_DIR=$DISTANT_REPO_DIR
           if [ -d "\$DISTANT_REPO_DIR" ]; then
               cd "\$DISTANT_REPO_DIR" &&
               git fetch -q
           else
               echo "Unsuspected error: '$DISTANT_REPO_DIR' is not found."
               exit 1
           fi &&
           git checkout -q "$TARGET_BRANCH" &&
           git reset --hard origin/$TARGET_BRANCH

	   test -x ./autogen.sh && ./autogen.sh
EOF

}

## post-receive_post function gets called once per push after refs.
#post-receive_post() {
#  :
#}


## Setup the hook when in a gitdir. This is launched thanks to the
##  ``git-hooks add <my-hook-name> ...``
##
## Note: this command should create the ``<my-hook>.conf`` file thanks to the
##   ``init_action`` command.
## Receives:
##   $hook_name
install() {

    local usage branch hostdir host dir

    ## XXXvlab: remove reverse_host !
    usage="$command_prefix BRANCH HOST:DIR"

    if [ "$#" != 2  ]; then
        echo "Wrong number of arguments"
        echo "usage: $usage"
        exit 1
    fi

    branch=$1
    hostdir=$2

    host=$(echo $2 | cut -f 1 -d ":")
    dir=$(echo $2 | cut -f 2- -d ":")

    make_ssh_connection_work "$host" || exit 1

    init_action "$dir" <<EOF

HOST="$host"
DISTANT_REPO_DIR="$dir"
TARGET_BRANCH="$branch"

EOF

}
