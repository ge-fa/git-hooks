## -*- mode: shell-script -*-

## All variables listed here will be checked for existence
required_variables="HOST DISTANT_REPO_DIR TARGET_TAG_REGEX"

logfile=/tmp/logfile
## post-receive_ref function gets called for each pushed ref.
## These variables will be set accordingly:
##     $oldrev, $newrev, $refname
post-receive_ref() {

    is_tag "$refname" || return

    tag=$(get_bare_name "$refname")
    echo "$tag" | grep -- "$TARGET_TAG_REGEX" 2>&1 >/dev/null || return

    pid="$$"
    clone_dir="$tmpdir/$pid"
    output_file="$tmpdir/${COMPONENT_NAME}-$tag.tar.gz"

    echo "Releasing '${COMPONENT_NAME}-$tag.tar.gz' to '$HOST:$DISTANT_REPO_DIR'."
    mkdir "$clone_dir" &&
    git clone -q "$CURRENT_REPO_PATH" "$clone_dir/$COMPONENT_NAME" &&
    (cd "$clone_dir/$COMPONENT_NAME" &&
     git checkout -q "$tag") &&
    rm -rf "$clone_dir/$COMPONENT_NAME/.git" &&
    (cd "$clone_dir"; tar c "$COMPONENT_NAME" | gzip > "$output_file") &&
    scp "$output_file" "$HOST:$DISTANT_REPO_DIR" &&
    rm -rf "$clone_dir" "$output_file"

}

## post-receive_post function gets called once per push after refs.
#post-receive_post() {
#  :
#}


## Setup the hook when in a gitdir. This is launched thanks to the
##  ``git-hooks add <my-hook-name> ...``
##
## Note: this command should create the ``<my-hook>.conf`` file thanks to the
##   ``init_action`` command.
## Receives:
##   $hook_name
install() {
    local usage tag_regex host dir

    usage="$command_prefix TARGET_TAG_REGEX HOST DISTANT_REPO_DIR"

    if [ "$#" != 3  ]; then
        echo "Wrong number of arguments"
        echo "usage: $usage"
        exit 1
    fi

    tag_regex=$1
    host=$2
    dir=$3

    make_ssh_connection_work "$host" || exit 1

    init_action "$host:$dir" <<EOF

HOST="$host"
DISTANT_REPO_DIR="$dir"
TARGET_TAG_REGEX="$tag_regex"

EOF

}
