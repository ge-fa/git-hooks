#!/bin/bash

# This script is expected to be called with the GIT_DIR directory set to the
# directory of the component which have been changed.
# It is called by each component to launch post-receive hook.

SCRIPT_DIR="$(dirname "$(readlink -e "$0")")"
. "$SCRIPT_DIR/helpers"

## Will display some additional information. This might be helpfull to
## debug what is happening.
VERBOSE="True"

[ -e "/etc/git-hooks.conf" ] && . /etc/git-hooks.conf

if ! [ -d "$CURRENT_REPO_PATH/hooks/post-receive.d/" ]; then
    if [ "$VERBOSE" == "True" ]; then
        echo "!! No hook dir !."
        echo "    -> You must put your hooks in 'hooks/post-receive.d/' directory"
    fi
    test -d "$tmpdir" && rm -rf "$tmpdir"
    exit 0
fi

hook_files="$(echo "$CURRENT_REPO_PATH/hooks/post-receive.d/"*.hook)"
if [ "$hook_files" == "$CURRENT_REPO_PATH/hooks/post-receive.d/*.hook" ]; then
     if [ "$VERBOSE" == "True" ]; then
          echo "!! Hook dir is empty, or hook files not correctly named."
          echo "    -> Your hooks should be placed and named as follows:"
          echo "       '$CURRENT_REPO_PATH/hooks/post-receive.d/*.hook'"
     fi
     test -d "$tmpdir" && rm -rf "$tmpdir"
     exit 0
fi

echo "Launch generic-post-receive..." | divert_to_log

# We loop until there is no more input, because another push may happen while
# weâ€™re executing.
while read oldrev newrev refname; do
    for hook_file in $hook_files; do
        ## we launch all functions in a subshell to avoid as much as possible
        ## cross-effects.
        export oldrev newrev refname
        launch_hook "$hook_file" post-receive_ref
    done
done

for hook_file in $hook_files; do
    launch_hook "$hook_file" post-receive_post
done


test -d "$tmpdir" && rm -rf "$tmpdir"
